<!doctype html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>QCM Physique-Chimie (5ème) — 10 questions</title>
<style>
  :root{
    --bg1:#0f172a; --bg2:#0b1220; --card:#0f172a;
    --accent1:#00d4ff; --accent2:#7c3aed; --glass: rgba(255,255,255,0.04);
    --text:#e6eef8;
  }
  *{box-sizing:border-box;font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,"Helvetica Neue",Arial;}
  body{
    margin:0; min-height:100vh; color:var(--text);
    background:linear-gradient(135deg,var(--bg1) 0%,var(--bg2) 60%);
    display:flex; align-items:center; justify-content:center; padding:28px;
  }
  .container{
    width:900px; max-width:95vw; background:linear-gradient(180deg, rgba(255,255,255,0.03), rgba(0,0,0,0.02));
    border-radius:16px; padding:28px; box-shadow: 0 8px 40px rgba(2,6,23,0.7); backdrop-filter: blur(6px);
    border: 1px solid rgba(255,255,255,0.03);
  }
  header{display:flex;justify-content:space-between;align-items:center;margin-bottom:18px;}
  h1{margin:0;font-size:20px;letter-spacing:0.2px}
  .progress{
    font-size:14px; opacity:0.9;
  }
  .card{
    background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0.02));
    border-radius:12px; padding:18px; margin-bottom:18px; border:1px solid var(--glass);
  }
  .question{
    font-size:18px; margin-bottom:12px;
  }
  .options{display:grid; grid-template-columns:1fr; gap:10px;}
  .option{
    padding:12px 14px; border-radius:10px; cursor:pointer; user-select:none;
    border:1px solid rgba(255,255,255,0.04); background:transparent;
    transition:transform .12s ease, box-shadow .12s ease;
  }
  .option:hover{transform:translateY(-3px); box-shadow:0 6px 18px rgba(2,6,23,0.6)}
  .option input{margin-right:10px;}
  .controls{display:flex; justify-content:flex-end; gap:12px; align-items:center;}
  button{
    background:linear-gradient(90deg,var(--accent1),var(--accent2)); color:#04111a;
    border:none; padding:10px 16px; border-radius:10px; font-weight:600; cursor:pointer;
    box-shadow:0 6px 14px rgba(124,58,237,0.18); transition:transform .12s ease, opacity .12s;
  }
  button:active{transform:translateY(1px)}
  button[disabled]{opacity:0.56; cursor:not-allowed; box-shadow:none}
  .small{font-size:13px; opacity:0.85}
  .footer-note{margin-top:10px; font-size:13px; opacity:0.8}
  /* result */
  .result{
    text-align:center; padding:26px;
  }
  .score{
    font-size:48px; font-weight:700; margin:8px 0;
    background:linear-gradient(90deg,var(--accent1),var(--accent2));
    -webkit-background-clip:text; color:transparent;
  }
  .remark{margin-top:8px; font-size:16px;}
  /* responsive */
  @media (max-width:720px){
    .container{padding:18px}
    h1{font-size:18px}
  }
</style>
</head>
<body>
  <div class="container" role="application" aria-labelledby="title">
    <header>
      <h1 id="title">QCM Physique-Chimie — Niveau 5ème</h1>
      <div class="progress" id="progress">Question 1 / 10</div>
    </header>

    <div class="card" id="quiz-card" aria-live="polite">
      <div class="question" id="question-text">...</div>
      <form id="options-form" class="options" autocomplete="off" novalidate>
        <!-- options injected here -->
      </form>
      <div class="footer-note small">Une fois que tu cliques sur <strong>Suivant</strong>, tu ne pourras pas revenir à la question précédente.</div>
    </div>

    <div class="controls">
      <div class="small" id="timer-area"></div>
      <button id="next-btn">Suivant ▶</button>
    </div>
  </div>

<script>
/*
  QCM 10 questions niveau 5ème - Français
  - une question visible à la fois
  - obligatoire de choisir une réponse
  - pas de retour en arrière possible
*/

const questions = [
  {
    q: "1) Quel est l'état de la matière d'un glaçon à -5 °C ?",
    options: ["Solide", "Liquide", "Gazeux", "Plasma"],
    correct: 0
  },
  {
    q: "2) Quel appareil sert à mesurer une tension électrique (en volts) ?",
    options: ["Voltmètre", "Ampèremètre", "Ohmmètre", "Thermomètre"],
    correct: 0
  },
  {
    q: "3) Lequel des éléments suivants est une réaction chimique ?",
    options: ["La fonte d'une plaque de chocolat", "La combustion d'une bougie", "La dissolution du sucre dans l'eau", "La filtration d'un mélange"],
    correct: 1
  },
  {
    q: "4) Quel nom donne-t-on à un mélange homogène de deux ou plusieurs substances (ex : eau salée) ?",
    options: ["Un mélange hétérogène", "Un corps pur", "Une solution", "Un composé"],
    correct: 2
  },
  {
    q: "5) Quel est l'unité de la résistance électrique ?",
    options: ["Ampère (A)", "Ohm (Ω)", "Volt (V)", "Watt (W)"],
    correct: 1
  },
  {
    q: "6) Dans quel sens les charges électriques se déplacent-elles dans un fil métallique ?",
    options: ["Du pôle positif vers le pôle négatif", "Du pôle négatif vers le pôle positif", "Elles ne se déplacent pas", "Selon la température uniquement"],
    correct: 1
  },
  {
    q: "7) Quel gaz produit principalement la respiration des êtres vivants ?",
    options: ["Azote (N₂)", "Oxygène (O₂)", "Dioxyde de carbone (CO₂)", "Hydrogène (H₂)"],
    correct: 2
  },
  {
    q: "8) Que faut-il pour qu'une lampe s'allume dans un circuit électrique simple ?",
    options: ["Une source de tension, un fil et une lampe", "Une source de tension et un interrupteur uniquement", "Un circuit fermé avec une source de tension et la lampe", "Deux ampèremètres"],
    correct: 2
  },
  {
    q: "9) Quelle transformation correspond à l'évaporation ?",
    options: ["Liquide → Solide", "Solide → Gazeux", "Liquide → Gazeux", "Gazeux → Liquide", "Solide → Liquide"],
    correct: 2
  },
  {
    q: "10) Lequel des suivants est un composé chimique ?",
    options: ["Oxygène (O₂)", "Fer (Fe)", "Eau (H₂O)", "Azote (N₂)"],
    correct: 2
  }
];

// état
let current = 0;
const total = questions.length;
const answers = new Array(total).fill(null);

// éléments DOM
const qText = document.getElementById('question-text');
const optionsForm = document.getElementById('options-form');
const progress = document.getElementById('progress');
const nextBtn = document.getElementById('next-btn');
const timerArea = document.getElementById('timer-area');

// Empêche retour arrière du navigateur (simple protection côté client)
history.replaceState({q: current}, '', '');
function pushState(){
  history.pushState({q: current}, '', '');
}
window.addEventListener('popstate', function(e){
  // dès qu'on détecte un popstate, on repousse l'état pour bloquer le retour
  pushState();
});

// affichage d'une question
function renderQuestion(index){
  const item = questions[index];
  progress.textContent = `Question ${index+1} / ${total}`;
  qText.textContent = item.q;
  // supprimer anciennes options
  optionsForm.innerHTML = '';
  // créer options (4 ou 5)
  item.options.forEach((opt, i) => {
    const id = `opt-${index}-${i}`;
    const wrapper = document.createElement('label');
    wrapper.className = 'option';
    wrapper.setAttribute('for', id);
    wrapper.innerHTML = `
      <input type="radio" name="answer" id="${id}" value="${i}" />
      <span>${opt}</span>
    `;
    // si l'utilisateur avait déjà répondu (normalement pas possible), on précochera (mais on empêche la modification)
    if (answers[index] !== null){
      wrapper.querySelector('input').checked = (answers[index] === i);
      wrapper.style.opacity = 0.7;
      wrapper.style.pointerEvents = 'none';
    }
    optionsForm.appendChild(wrapper);
  });

  // si c'est la dernière question, changer le texte du bouton
  nextBtn.textContent = (index === total - 1) ? 'Terminer' : 'Suivant ▶';

  // empêcher modification si déjà répondu (sécurise le cas reload avec état interne)
  if (answers[index] !== null){
    // on verrouille l'ensemble du form pour cette question
    Array.from(optionsForm.elements).forEach(el => el.disabled = true);
  }

  // push history state pour bloquer retour
  pushState();
}

// vérifie sélection et enregistre
function handleNext(){
  const form = optionsForm;
  const picked = form.answer ? form.answer.value : null;
  if (picked === null){
    alert('Veuillez sélectionner une réponse avant de continuer (question obligatoire).');
    return;
  }

  // enregistrer réponse (numérique)
  answers[current] = Number(picked);

  // verrouille options de la question actuelle pour empêcher modification après validation
  Array.from(form.elements).forEach(el => el.disabled = true);

  // avancer
  if (current < total - 1){
    current++;
    renderQuestion(current);
    // petite animation de visibilité
    window.scrollTo({top:0,behavior:'smooth'});
  } else {
    // calculer résultat
    showResult();
  }
}

// calcule score et affiche résultat final
function showResult(){
  let score = 0;
  for (let i=0;i<total;i++){
    if (answers[i] === questions[i].correct) score++;
  }
  // remplace le contenu principal par le résultat
  const container = document.querySelector('.container');
  container.innerHTML = `
    <div class="card result" role="status" aria-live="polite">
      <h2>Résultat final</h2>
      <div class="score">${score} / ${total}</div>
      <div class="remark">${getRemark(score)}</div>
      <div class="small" style="margin-top:12px">Détails : ${score} bonnes réponses sur ${total}.</div>
    </div>
    <div style="display:flex;justify-content:center;margin-top:14px">
      <button id="review-btn">Voir corrections</button>
      <button id="restart-btn" style="margin-left:10px">Recommencer</button>
    </div>
  `;

  // corrections (l'utilisateur peut consulter les corrections, mais pas revenir et modifier ses réponses)
  document.getElementById('review-btn').addEventListener('click', showCorrections);
  document.getElementById('restart-btn').addEventListener('click', restart);
  // nettoyer l'historique protecteur
  history.replaceState({}, '', '');
}

// phrase de feedback
function getRemark(score){
  const pct = score / total;
  if (pct === 1) return "Excellent — 10/10, bravo !";
  if (pct >= 0.8) return "Très bien — tu maîtrises la plupart des notions.";
  if (pct >= 0.6) return "Bien — encore un peu de travail.";
  if (pct >= 0.4) return "Moyen — révise quelques notions clés.";
  return "À revoir — n'hésite pas à demander des explications sur les questions ratées.";
}

// affiche corrections (lecture seule)
function showCorrections(){
  const container = document.querySelector('.container');
  container.innerHTML = '<h2 style="margin-bottom:12px">Corrections</h2>';
  const list = document.createElement('div');
  questions.forEach((q,i) => {
    const card = document.createElement('div');
    card.className = 'card';
    const correctIdx = q.correct;
    const user = answers[i];
    card.innerHTML = `
      <div style="font-weight:600">Q${i+1}. ${q.q}</div>
      <div style="margin-top:8px">Votre réponse : <strong>${user !== null ? q.options[user] : '—'}</strong></div>
      <div>Bonne réponse : <strong>${q.options[correctIdx]}</strong></div>
    `;
    list.appendChild(card);
  });
  container.appendChild(list);
  const btn = document.createElement('div');
  btn.style.marginTop='12px';
  btn.innerHTML = '<button id="finish-btn">Terminer</button>';
  container.appendChild(btn);
  document.getElementById('finish-btn').addEventListener('click', () => location.reload());
}

// redémarrer le qcm
function restart(){ location.reload(); }

// initialisation
renderQuestion(current);

// bouton suivant
nextBtn.addEventListener('click', handleNext);

// Accessibilité: permettre navigation clavier (Entrée pour valider une réponse)
optionsForm.addEventListener('keydown', function(e){
  if (e.key === 'Enter'){
    e.preventDefault();
    handleNext();
  }
});

// petite sécurité : avantunload pour prévenir de refresh (optionnel) - on peut commenter si gênant
window.addEventListener('beforeunload', function (e) {
  // si l'utilisateur n'a pas fini, prévenir qu'il va perdre sa progression
  if (answers.some(a => a === null)){
    e.preventDefault();
    e.returnValue = '';
  }
});
</script>
</body>
</html>
